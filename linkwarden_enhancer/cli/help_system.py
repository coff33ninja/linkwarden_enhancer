"""Comprehensive help system for CLI"""

from typing import Dict, List, Any


class HelpSystem:
    """Comprehensive help and documentation system"""
    
    def __init__(self):
        """Initialize help system"""
        self.help_topics = self._load_help_topics()
    
    def _load_help_topics(self) -> Dict[str, Dict[str, Any]]:
        """Load help topics and documentation"""
        
        return {
            'overview': {
                'title': 'üîñ Linkwarden Enhancer Overview',
                'content': """
Linkwarden Enhancer is an AI-powered bookmark management system that provides:

üõ°Ô∏è SAFETY FEATURES:
  ‚Ä¢ Comprehensive data validation and integrity checking
  ‚Ä¢ Automatic backup creation before any operations
  ‚Ä¢ Progress monitoring with safety thresholds
  ‚Ä¢ Rollback and recovery capabilities

üß† AI INTELLIGENCE:
  ‚Ä¢ Smart categorization using domain and content analysis
  ‚Ä¢ Intelligent tag suggestions based on content
  ‚Ä¢ Continuous learning from user behavior
  ‚Ä¢ Similarity detection and duplicate prevention

üì• IMPORT CAPABILITIES:
  ‚Ä¢ GitHub starred repositories and owned repos
  ‚Ä¢ Browser bookmarks (Chrome, Firefox, Safari)
  ‚Ä¢ Linkwarden backup files
  ‚Ä¢ Universal import with conflict resolution

‚ú® ENHANCEMENT FEATURES:
  ‚Ä¢ Web scraping for metadata enrichment
  ‚Ä¢ Content analysis and summarization
  ‚Ä¢ Network analysis for relationship discovery
  ‚Ä¢ Adaptive intelligence based on user preferences

üìä REPORTING & METRICS:
  ‚Ä¢ Comprehensive change tracking
  ‚Ä¢ Performance monitoring and statistics
  ‚Ä¢ Detailed operation reports in multiple formats
  ‚Ä¢ System health monitoring
                """
            },
            
            'getting_started': {
                'title': 'üöÄ Getting Started',
                'content': """
QUICK START:

1. BASIC PROCESSING:
   python cli.py process input.json output.json
   
2. INTERACTIVE MODE:
   python cli.py process input.json output.json --interactive
   
3. IMPORT FROM GITHUB:
   python cli.py import --github --github-token YOUR_TOKEN --github-username YOUR_USERNAME -o bookmarks.json
   
4. INTERACTIVE MENU:
   python cli.py menu

FIRST TIME SETUP:

1. Install dependencies:
   pip install -r requirements.txt

2. Configure GitHub (optional):
   export GITHUB_TOKEN=your_token_here
   export GITHUB_USERNAME=your_username

3. Run validation on your data:
   python cli.py validate your_bookmarks.json

4. Create your first backup:
   python cli.py backup create your_bookmarks.json
                """
            },
            
            'safety_features': {
                'title': 'üõ°Ô∏è Safety Features',
                'content': """
COMPREHENSIVE SAFETY SYSTEM:

VALIDATION ENGINE:
  ‚Ä¢ JSON schema validation
  ‚Ä¢ Data consistency checking
  ‚Ä¢ Relationship integrity verification
  ‚Ä¢ Field requirement validation

BACKUP SYSTEM:
  ‚Ä¢ Automatic backup before operations
  ‚Ä¢ Timestamped backup files
  ‚Ä¢ Compressed storage option
  ‚Ä¢ Retention policy management

PROGRESS MONITORING:
  ‚Ä¢ Real-time progress tracking
  ‚Ä¢ Safety threshold monitoring
  ‚Ä¢ User confirmation for risky operations
  ‚Ä¢ Detailed error and warning reporting

INTEGRITY CHECKING:
  ‚Ä¢ URL preservation verification
  ‚Ä¢ Collection relationship validation
  ‚Ä¢ Orphaned reference detection
  ‚Ä¢ Before/after comparison

RECOVERY SYSTEM:
  ‚Ä¢ Automatic rollback capabilities
  ‚Ä¢ Manual recovery procedures
  ‚Ä¢ Recovery plan generation
  ‚Ä¢ Backup verification

SAFETY COMMANDS:
  python cli.py validate data.json                    # Validate data
  python cli.py backup create data.json               # Create backup
  python cli.py backup restore backup.json data.json  # Restore backup
  python cli.py backup list                           # List backups
                """
            },
            
            'ai_features': {
                'title': 'üß† AI Features',
                'content': """
INTELLIGENT BOOKMARK MANAGEMENT:

SMART CATEGORIZATION:
  ‚Ä¢ Domain-based classification
  ‚Ä¢ Content analysis using TF-IDF and LDA
  ‚Ä¢ Pattern recognition from existing data
  ‚Ä¢ Confidence scoring for suggestions

TAG PREDICTION:
  ‚Ä¢ Machine learning-based tag suggestions
  ‚Ä¢ Content keyword extraction
  ‚Ä¢ Technology and framework detection
  ‚Ä¢ Gaming and entertainment classification

CONTINUOUS LEARNING:
  ‚Ä¢ Learn from user feedback
  ‚Ä¢ Adapt to user preferences
  ‚Ä¢ Pattern strength tracking
  ‚Ä¢ Incremental model updates

SIMILARITY DETECTION:
  ‚Ä¢ Near-duplicate bookmark detection
  ‚Ä¢ Content similarity analysis
  ‚Ä¢ Recommendation system
  ‚Ä¢ Clustering for organization

NETWORK ANALYSIS:
  ‚Ä¢ Bookmark relationship graphs
  ‚Ä¢ Community detection
  ‚Ä¢ Hub identification
  ‚Ä¢ Collection optimization

AI COMMANDS:
  python cli.py stats --learning                      # Learning statistics
  python cli.py intelligence train data.json          # Train from data
  python cli.py intelligence export --output ai.json  # Export AI data
                """
            },
            
            'import_system': {
                'title': 'üì• Import System',
                'content': """
UNIVERSAL IMPORT CAPABILITIES:

GITHUB INTEGRATION:
  ‚Ä¢ Import starred repositories
  ‚Ä¢ Import owned repositories
  ‚Ä¢ Intelligent tag generation
  ‚Ä¢ Language and framework detection
  ‚Ä¢ Repository metadata extraction

BROWSER BOOKMARKS:
  ‚Ä¢ Chrome bookmarks support
  ‚Ä¢ Firefox bookmarks support
  ‚Ä¢ Safari bookmarks support
  ‚Ä¢ Bookmark folder preservation

LINKWARDEN BACKUPS:
  ‚Ä¢ Native Linkwarden JSON format
  ‚Ä¢ Collection and tag preservation
  ‚Ä¢ Metadata retention
  ‚Ä¢ Relationship maintenance

IMPORT COMMANDS:
  # GitHub import
  python cli.py import --github --github-token TOKEN --github-username USER -o output.json
  
  # Browser bookmarks
  python cli.py import --browser bookmarks.html -o output.json
  
  # Linkwarden backup
  python cli.py import --linkwarden-backup backup.json -o output.json
  
  # Combined import
  python cli.py import --github --browser bookmarks.html --linkwarden-backup backup.json -o combined.json
                """
            },
            
            'interactive_mode': {
                'title': 'üéØ Interactive Mode',
                'content': """
INTERACTIVE FEATURES:

SUGGESTION REVIEW:
  ‚Ä¢ Review AI-generated categories
  ‚Ä¢ Approve or modify tag suggestions
  ‚Ä¢ Provide feedback for learning
  ‚Ä¢ Custom category/tag input

ENHANCEMENT REVIEW:
  ‚Ä¢ Review scraped metadata
  ‚Ä¢ Edit enhanced descriptions
  ‚Ä¢ Approve or reject enhancements
  ‚Ä¢ Manual content editing

LEARNING FEEDBACK:
  ‚Ä¢ Track suggestion acceptance/rejection
  ‚Ä¢ Learn user preferences
  ‚Ä¢ Adapt future suggestions
  ‚Ä¢ Show learning progress

INTERACTIVE COMMANDS:
  python cli.py process data.json output.json --interactive
  python cli.py menu                                   # Interactive menu
  
INTERACTIVE MENU OPTIONS:
  1. Process bookmarks with review
  2. Import from sources
  3. View learning statistics
  4. Configuration management
  5. Generate reports
  6. Validate data
  7. Backup & recovery
                """
            },
            
            'reporting': {
                'title': 'üìä Reporting & Analytics',
                'content': """
COMPREHENSIVE REPORTING SYSTEM:

OPERATION REPORTS:
  ‚Ä¢ Before/after comparison
  ‚Ä¢ Detailed change tracking
  ‚Ä¢ Statistics and metrics
  ‚Ä¢ Multiple output formats

PERFORMANCE REPORTS:
  ‚Ä¢ System performance metrics
  ‚Ä¢ Operation timing analysis
  ‚Ä¢ Resource usage tracking
  ‚Ä¢ Trend analysis

PERIOD REPORTS:
  ‚Ä¢ Activity over time periods
  ‚Ä¢ Change frequency analysis
  ‚Ä¢ Pattern identification
  ‚Ä¢ Historical trends

REPORT FORMATS:
  ‚Ä¢ JSON (structured data)
  ‚Ä¢ HTML (web viewing)
  ‚Ä¢ CSV (spreadsheet import)
  ‚Ä¢ Markdown (documentation)

REPORTING COMMANDS:
  # Operation report
  python cli.py report operation before.json after.json --format html
  
  # Performance report
  python cli.py report performance --export-metrics
  
  # Period report
  python cli.py report period --hours 168 --format html
  
  # Statistics
  python cli.py stats --all --export stats.json
                """
            },
            
            'configuration': {
                'title': '‚öôÔ∏è Configuration',
                'content': """
CONFIGURATION OPTIONS:

SAFETY SETTINGS:
  ‚Ä¢ max_deletion_percentage: Maximum deletion threshold
  ‚Ä¢ backup_enabled: Automatic backup creation
  ‚Ä¢ dry_run_mode: Test mode without changes
  ‚Ä¢ integrity_checks: Enable integrity validation

AI SETTINGS:
  ‚Ä¢ enable_ollama: Local LLM integration
  ‚Ä¢ max_clusters: Maximum clustering groups
  ‚Ä¢ learning_rate: AI learning speed
  ‚Ä¢ confidence_threshold: Suggestion confidence

IMPORT SETTINGS:
  ‚Ä¢ github_token: GitHub API token
  ‚Ä¢ github_username: GitHub username
  ‚Ä¢ max_repos: Repository import limit
  ‚Ä¢ rate_limiting: API rate limiting

CONFIGURATION FILES:
  ‚Ä¢ config/settings.py: Main configuration
  ‚Ä¢ config/defaults.py: Default values
  ‚Ä¢ .env: Environment variables

ENVIRONMENT VARIABLES:
  export GITHUB_TOKEN=your_token
  export GITHUB_USERNAME=your_username
  export OLLAMA_HOST=localhost:11434
                """
            },
            
            'troubleshooting': {
                'title': 'üîß Troubleshooting',
                'content': """
COMMON ISSUES AND SOLUTIONS:

IMPORT ISSUES:
  Problem: GitHub import fails
  Solution: Check token permissions and rate limits
  Command: python cli.py import --github --verbose

  Problem: Browser bookmarks not importing
  Solution: Verify file format and encoding
  Command: python cli.py validate bookmarks.html

PROCESSING ISSUES:
  Problem: Processing takes too long
  Solution: Enable progress monitoring and check thresholds
  Command: python cli.py process data.json output.json --verbose

  Problem: Too many items being deleted
  Solution: Adjust deletion threshold or use dry-run
  Command: python cli.py process data.json output.json --dry-run --max-deletion-percent 5

AI ISSUES:
  Problem: Poor categorization suggestions
  Solution: Train AI with more data or provide feedback
  Command: python cli.py intelligence train training_data.json

  Problem: Ollama not working
  Solution: Check Ollama installation and server status
  Command: python cli.py stats --performance

SAFETY ISSUES:
  Problem: Validation failures
  Solution: Check data integrity and fix issues
  Command: python cli.py validate data.json --fix-issues

  Problem: Backup restoration fails
  Solution: Verify backup integrity and permissions
  Command: python cli.py backup list

DEBUGGING:
  ‚Ä¢ Use --verbose flag for detailed logging
  ‚Ä¢ Check log files in logs/ directory
  ‚Ä¢ Use --dry-run for testing
  ‚Ä¢ Validate data before processing
                """
            }
        }
    
    def show_help(self, topic: str = 'overview') -> None:
        """Show help for a specific topic"""
        
        if topic not in self.help_topics:
            print(f"‚ùå Unknown help topic: {topic}")
            print("\nAvailable topics:")
            for topic_name in self.help_topics.keys():
                print(f"  ‚Ä¢ {topic_name}")
            return
        
        help_info = self.help_topics[topic]
        print(f"\n{help_info['title']}")
        print("=" * len(help_info['title']))
        print(help_info['content'])
    
    def show_all_topics(self) -> None:
        """Show all available help topics"""
        
        print("\nüìö Available Help Topics:")
        print("=" * 30)
        
        for topic_name, topic_info in self.help_topics.items():
            print(f"\n{topic_info['title']}")
            print(f"  Command: python cli.py help {topic_name}")
    
    def search_help(self, search_term: str) -> None:
        """Search help content for a term"""
        
        search_term = search_term.lower()
        matches = []
        
        for topic_name, topic_info in self.help_topics.items():
            content = topic_info['content'].lower()
            title = topic_info['title'].lower()
            
            if search_term in content or search_term in title:
                matches.append((topic_name, topic_info['title']))
        
        if matches:
            print(f"\nüîç Help topics matching '{search_term}':")
            print("-" * 40)
            
            for topic_name, title in matches:
                print(f"  ‚Ä¢ {title}")
                print(f"    Command: python cli.py help {topic_name}")
        else:
            print(f"‚ùå No help topics found matching '{search_term}'")
    
    def show_quick_reference(self) -> None:
        """Show quick reference of common commands"""
        
        print("""
üîñ LINKWARDEN ENHANCER - Quick Reference

BASIC COMMANDS:
  python cli.py process input.json output.json         # Process bookmarks
  python cli.py import --github -o bookmarks.json     # Import from GitHub
  python cli.py validate data.json                    # Validate data
  python cli.py menu                                  # Interactive menu

SAFETY COMMANDS:
  python cli.py backup create data.json               # Create backup
  python cli.py backup restore backup.json data.json  # Restore backup
  python cli.py validate data.json --fix-issues       # Fix validation issues

REPORTING COMMANDS:
  python cli.py stats --all                           # Show all statistics
  python cli.py report operation before.json after.json  # Operation report
  python cli.py report performance                    # Performance report

INTELLIGENCE COMMANDS:
  python cli.py intelligence export --output ai.json  # Export AI data
  python cli.py intelligence train data.json          # Train from data
  python cli.py stats --learning                      # Learning statistics

INTERACTIVE MODE:
  python cli.py process data.json output.json --interactive  # Interactive processing
  python cli.py menu                                         # Interactive menu

HELP COMMANDS:
  python cli.py --help                                # General help
  python cli.py help overview                         # System overview
  python cli.py help getting_started                  # Getting started guide
  python cli.py help troubleshooting                  # Troubleshooting guide

For detailed help on any topic, use: python cli.py help <topic>
        """)


def show_help_command(topic: str = 'overview') -> None:
    """Show help for CLI usage"""
    
    help_system = HelpSystem()
    
    if topic == 'topics':
        help_system.show_all_topics()
    elif topic == 'quick':
        help_system.show_quick_reference()
    elif topic.startswith('search:'):
        search_term = topic[7:]  # Remove 'search:' prefix
        help_system.search_help(search_term)
    else:
        help_system.show_help(topic)