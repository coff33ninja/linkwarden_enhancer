[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "linkwarden-enhancer"
version = "1.0.0"
description = "AI-powered bookmark management system with enterprise-grade safety features"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DJ", email = "your.email@example.com"}
]
maintainers = [
    {name = "DJ", email = "your.email@example.com"}
]
keywords = [
    "bookmarks",
    "linkwarden", 
    "ai",
    "machine-learning",
    "bookmark-manager",
    "web-scraping",
    "github-integration",
    "content-analysis",
    "duplicate-detection",
    "backup-system",
    "cli",
    "automation"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Office/Business :: Groupware",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Archiving :: Backup",
    "Topic :: Utilities"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "requests>=2.25.0",
    "beautifulsoup4>=4.9.0",
    "lxml>=4.6.0",
    "scikit-learn>=1.0.0",
    "sentence-transformers>=2.2.0",
    "nltk>=3.6.0",
    "networkx>=2.6.0",
    "selenium>=4.0.0",
    "requests-html>=0.10.0",
    "newspaper3k>=0.2.8",
    "aiohttp>=3.8.0",
    "PyGithub>=1.55.0",
    "ollama>=0.1.0",
    "textblob>=0.17.0",
    "spacy>=3.4.0",
    "python-dotenv>=0.19.0",
    "click>=8.0.0",
    "tqdm>=4.62.0",
    "colorama>=0.4.4",
    "psutil",
    "jsonschema"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=2.12.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "bandit>=1.7.0",
    "safety>=1.10.0"
]
gui = [
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "python-multipart>=0.0.5",
    "websockets>=10.0"
]
all = [
    "torch>=1.9.0",
    "transformers>=4.12.0",
    "chromadb>=0.3.0"
]

[project.urls]
Homepage = "https://github.com/coff33ninja/linkwarden-enhancer"
Repository = "https://github.com/coff33ninja/linkwarden-enhancer"
Documentation = "https://github.com/coff33ninja/linkwarden-enhancer/tree/main/docs"
Changelog = "https://github.com/coff33ninja/linkwarden-enhancer/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/coff33ninja/linkwarden-enhancer/issues"

[project.scripts]
linkwarden-enhancer = "cli:main"
lwe = "cli:main"

[tool.setuptools]
packages = ["linkwarden_enhancer"]
include-package-data = true

[tool.setuptools.package-data]
linkwarden_enhancer = [
    "data/*.json",
    "examples/*.json",
    "gui/static/**/*"
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["linkwarden_enhancer"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["linkwarden_enhancer"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]